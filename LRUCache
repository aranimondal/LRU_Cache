import java.util.*;
 
public class LRUCache {
    private final int capacity;
    private HashMap<Integer, Node> map;
    private Node head, tail;
 
    public LRUCache(int capacity) {
        this.capacity = capacity;
        map = new HashMap<>();
        head = new Node(0, 0);
        tail = new Node(0, 0);
        head.next = tail;
        tail.prev = head;
    }
 
    public int get(int key) {
        if (!map.containsKey(key)) return -1;
 
        Node node = map.get(key);
        removeNode(node);
        insertNode(node);
 
        return node.value;
    }
 
    public void put(int key, int value) {
        if (map.containsKey(key)) {
            Node node = map.get(key);
            removeNode(node);
            node.value = value;
        } else {
            if (map.size() == capacity) {
                map.remove(tail.prev.key);
                removeNode(tail.prev);
            }
 
            Node newNode = new Node(key, value);
            map.put(key, newNode);
        }
 
        insertNode(newNode);
    }
 
    private void removeNode(Node node) {
        Node prev = node.prev;
        Node next = node.next;
 
        prev.next = next;
        next.prev = prev;
    }
 
    private void insertNode(Node node) {
        node.prev = head;
        node.next = head.next;
 
        head.next.prev = node;
        head.next = node;
    }
 
    class Node {
        int key;
        int value;
        Node prev;
        Node next;
 
        public Node(int key, int value) {
            this.key = key;
            this.value = value;
        }
    }
}
